from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
import datetime
from src.keyboards.reply import main
from src.utils.states import Form
from src.utils.dbconnect import Request
from src.utils.event_text_formater import EventTextFormater
from src.keyboards.builders import profile
from src.keyboards.reply import rmk
from urllib.parse import urlparse

router = Router()
event_txt = EventTextFormater()



async def check_date(date: str) -> bool: #YYYY MM DD
    try:
        date = date.split(".")[::-1]
        date[1] = date[1].zfill(2); date[2] = date[2].zfill(2)
        datetime.date.fromisoformat("-".join(date))
        date[1] = date[1].rstrip(); date[2] = date[2].rstrip()
        if datetime.datetime(int(date[0]), int(date[1]), int(date[2])) >= datetime.datetime.now():
            return True
        else:
            raise ValueError
    except Exception as ex:
        print(ex)
        return False

async def check_time(time: str) -> bool:
    try:
        hours, minutes = time.split(":")
        if 0 <= int(hours) <= 23 and 0 <= int(minutes) <= 59:
            return True
        else:
            return False
    except Exception as ex:
        return False
    

async def print_event_data(state, message, after_publish=False):
    data = await state.get_data()
    if after_publish:
        await message.answer("–í—ã —Å–æ–∑–¥–∞–ª–∏ —á–µ—Ä–Ω–æ–≤–∏–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.", reply_markup=profile(["‚úÖ–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", "‚öôÔ∏è–î–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ"]))
    else:
        await message.answer("–í—ã —Å–æ–∑–¥–∞–ª–∏ —á–µ—Ä–Ω–æ–≤–∏–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.", reply_markup=profile(["üó£Ô∏è–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", "‚öôÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å", "‚¨ÖÔ∏è–Ω–∞–∑–∞–¥"]))
    date = data["date"].split(".")
    time = data["time"].split(":")
    date = datetime.datetime(int(date[2]), int(date[1]), int(date[0]), int(time[0]), int(time[1]))
    data["date"] = date
    basic_info = await event_txt.get_basic_info(data)
    more_info = await event_txt.get_more_info(data)
    photo_file_id = data["photo_file_id"]

    formatted_text = f"{basic_info}\n\n{more_info}"
    if photo_file_id != None:
        await message.answer_photo(
            photo_file_id,
            formatted_text,
        )
    else:
        await message.answer(formatted_text)


@router.message(StateFilter("*"), F.text.casefold().in_(["‚¨ÖÔ∏è–Ω–∞–∑–∞–¥"]))
async def back_state(message: Message, state: FSMContext, request: Request):
    current_state = await state.get_state()
    if Form.name == "CHANGE_AFTER_PUBLISH_NAME" or Form.date == "CHANGE_AFTER_PUBLISH_DATE" or Form.time == "CHANGE_AFTER_PUBLISH_TIME"\
    or Form.place == "CHANGE_AFTER_PUBLISH_PLACE" or Form.link == "CHANGE_AFTER_PUBLISH_LINK" or Form.owner_info == "CHANGE_AFTER_PUBLISH_OWNER" or Form.photo == "CHANGE_AFTER_PUBLISH_PHOTO_FILE_ID":
        await state.set_state(Form.final)
        return
    if current_state == Form.name:
        await state.clear()
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main)
        return
    elif current_state == Form.change_after_publish:
        data = await state.get_data()
        data["owner_telegram_id"] = message.from_user.id
        await request.set_event(data)
        await state.clear()
        await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main)
        return
    prev = None
    for st in Form.__all_states__:
        if st.state == current_state:
            if prev.state in ['Form:add_template_name', 'Form:add_template_value', 'Form:delete_template']:
                prev = Form.owner_info
            state_name = prev.state[5:]
            print(prev)
            match state_name:
                case "name":
                    await state.update_data(name="")
                case "date":
                    await state.update_data(date="")
                case "time":
                    await state.update_data(time="")
                case "place":
                    await state.update_data(place="")
                case "info":
                    await state.update_data(info="")
                case "link":
                    await state.update_data(link="")
                case "photo":
                    await state.update_data(photo="")
                case "owner_info":
                    await state.update_data(owner_info="")

            await state.set_state(prev)

            if prev.state != "Form:final":
                await message.answer(Form.texts[prev.state][0], reply_markup=Form.texts[prev.state][1])
            else:
                await print_event_data(state=state, message=message)
            return
        prev = st



@router.message(Form.name)
async def form_name(message: Message, state: FSMContext, request: Request):
    data = await state.get_data()
    name = message.text
    if len(name) > 50:
        await message.answer("üö´C–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    else:
        await state.update_data(name=name)
        if "name" in data.keys() and data["name"] == "CHANGE_AFTER_PUBLISH_NAME":
            await print_event_data(state=state, message=message, after_publish=True)
            await state.set_state(Form.final)
        elif "name" in data.keys() and data["name"] != "":
            await print_event_data(state=state, message=message)
            await state.set_state(Form.final)
        else:
            await state.set_state(Form.date)
            await message.answer("üìÖ –û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì", reply_markup=profile(["‚¨ÖÔ∏è–Ω–∞–∑–∞–¥"]))



@router.message(Form.date, F.text)
async def form_date(message: Message, state: FSMContext, request: Request):
    data = await state.get_data()
    lst_date = message.text # DD MM YYYY
    if await check_date(lst_date):
        await state.update_data(date=message.text)
        if "date" in data.keys() and data["date"] == "CHANGE_AFTER_PUBLISH_DATE":
            await print_event_data(state=state, message=message, after_publish=True)
            await state.set_state(Form.final)
        elif "date" in data.keys() and data["date"] != "":
            await print_event_data(state=state, message=message)
            await state.set_state(Form.final)
        else:
            await state.set_state(Form.time)
            await message.answer("‚è±Ô∏è–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM", reply_markup=profile(["‚¨ÖÔ∏è–Ω–∞–∑–∞–¥"]))
        
    else:
        await message.answer("üö´ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é")


@router.message(Form.date)
async def incorrect_form_date(message: Message, state: FSMContext):
    await message.answer("üö´–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—ã")


@router.message(Form.time, F.text)
async def form_time(message: Message, state: FSMContext):
    time = message.text
    data = await state.get_data()
    if await check_time(time):
        await state.update_data(time=message.text)
        if "time" in data.keys() and data["time"] == "CHANGE_AFTER_PUBLISH_TIME":
            await print_event_data(state=state, message=message, after_publish=True)
            await state.set_state(Form.final)
        elif "time" in data.keys() and data["time"] != "":
            await print_event_data(state=state, message=message)
            await state.set_state(Form.final)
        else:
            await state.set_state(Form.place)
            await message.answer(
                "üó∫Ô∏è–î–æ–±–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", reply_markup=profile(["‚¨ÖÔ∏è–Ω–∞–∑–∞–¥"])
            )
    else:
        await message.answer("üö´ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ")

@router.message(Form.time)
async def incorrect_form_time(message: Message, state: FSMContext):
    await message.answer("üö´–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏")

@router.message(Form.place, F.text)
async def form_place(message: Message, state: FSMContext):
    data = await state.get_data()
    place = message.text
    if len(place) > 70:
        await message.answer("üö´C–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–∞–º—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    else:
        await state.update_data(place=message.text)
        if "place" in data.keys() and data["place"] == "CHANGE_AFTER_PUBLISH_PLACE":
            await print_event_data(state=state, message=message, after_publish=True)
            await state.set_state(Form.final)
        elif "place" in data.keys() and data["place"] != "":
            await print_event_data(state=state, message=message)
            await state.set_state(Form.final)
        else:
            await state.set_state(Form.info)
            await message.answer(
                "‚ÑπÔ∏è –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞", reply_markup=profile(["‚ùå–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", "‚¨ÖÔ∏è–Ω–∞–∑–∞–¥"])
            )

@router.message(Form.place)
async def incorrect_form_place(message: Message, state: FSMContext):
    await message.answer("üö´–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞")

@router.message(Form.info, F.text.casefold().in_(["‚ùå–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"]))
async def with_out_info(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(info="-")
    if "info" in data.keys() and data["info"] == "CHANGE_AFTER_PUBLISH_INFO":
        await print_event_data(state=state, message=message, after_publish=True)
        await state.set_state(Form.final)
    elif "info" in data.keys() and data["info"] != "":
        await print_event_data(state=state, message=message)
        await state.set_state(Form.final)
    else:
        await state.set_state(Form.link)
        await message.answer("üîó –î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–ø–∏—Å—å.", reply_markup=profile(["‚ùå–ë–µ–∑ —Å—Å—ã–ª–∫–∏", "‚¨ÖÔ∏è–Ω–∞–∑–∞–¥"]))

        
@router.message(Form.info, F.text)
async def form_info(message: Message, state: FSMContext):
    data = await state.get_data()
    if len(message.text) < 5:
        await message.answer("üòí –í–≤–µ–¥–∏—Ç–µ —á—Ç–æ-—Ç–æ –ø–æ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ", reply_markup=profile(["‚ùå–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", "‚¨ÖÔ∏è–Ω–∞–∑–∞–¥"]))
    elif len(message.text) > 800:
        await message.answer("ü´§ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=profile(["‚ùå–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", "‚¨ÖÔ∏è–Ω–∞–∑–∞–¥"]))
    else:
        await state.update_data(info=message.text)
        if "info" in data.keys() and data["info"] == "CHANGE_AFTER_PUBLISH_INFO":
            await print_event_data(state=state, message=message, after_publish=True)
            await state.set_state(Form.final)
        elif "info" in data.keys() and data["info"] != "":
            await print_event_data(state=state, message=message)
            await state.set_state(Form.final)
        else:
            await state.set_state(Form.link)
            await message.answer("üîó –î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–ø–∏—Å—å.", reply_markup=profile(["‚ùå–ë–µ–∑ —Å—Å—ã–ª–∫–∏", "‚¨ÖÔ∏è–Ω–∞–∑–∞–¥"]))

@router.message(Form.info)
async def incorrect_form_info(message: Message, state: FSMContext):
    await message.answer("üö´–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")

@router.message(Form.link, F.text.casefold().in_(["‚ùå–±–µ–∑ —Å—Å—ã–ª–∫–∏"]))
async def with_out_info(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(link="-")
    if "link" in data.keys() and data["link"] == "CHANGE_AFTER_PUBLISH_LINK":
        await print_event_data(state=state, message=message, after_publish=True)
        await state.set_state(Form.final)
    elif "link" in data.keys() and data["link"] != "":
        await print_event_data(state=state, message=message)
        await state.set_state(Form.final)
    else:
        await state.set_state(Form.owner_info)
        await message.answer("üë§–î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞", reply_markup=profile(["üìÉ–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω", "‚ûï–î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω", "üóëÔ∏è—É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω", "‚¨ÖÔ∏è–Ω–∞–∑–∞–¥"]))

@router.message(Form.link, F.text)
async def form_link(message: Message, state: FSMContext):
    data = await state.get_data()
    if urlparse(message.text).scheme:
        await state.update_data(link=message.text)
        if "link" in data.keys() and data["link"] == "CHANGE_AFTER_PUBLISH_LINK":
            await print_event_data(state=state, message=message, after_publish=True)
            await state.set_state(Form.final)
        elif "link" in data.keys() and data["link"] != "":
            await print_event_data(state=state, message=message)
            await state.set_state(Form.final)
        else:
            await state.set_state(Form.owner_info)
            await message.answer("üë§–î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞", reply_markup=profile(["üìÉ–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω", "‚ûï–î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω", "üóëÔ∏è—É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω", "‚¨ÖÔ∏è–Ω–∞–∑–∞–¥"]))
    else:
        await message.answer("üö´–°—Å—ã–ª–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–∞! –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑")

@router.message(Form.link)
async def incorrect_form_link(message: Message, state: FSMContext):
    await message.answer("üö´–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–∫–∏")


@router.message(Form.owner_info, F.text.casefold().in_(["üìÉ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω"]))
async def use_template_owner(message: Message, state: FSMContext, request: Request):
    await state.set_state(Form.owner_info)
    templates = await request.get_templates(message.from_user.id)
    buttons = []
    buttons = [template["name"] for template in templates if template]
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω", reply_markup=profile(buttons))

@router.message(Form.owner_info, F.text.casefold().in_(["üóëÔ∏è—É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω"]))
async def delete_template_owner(message: Message, state: FSMContext, request: Request):
    await state.set_state(Form.delete_template)
    templates = await request.get_templates(message.from_user.id)
    buttons = []
    buttons = [template["name"] for template in templates if template]
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω", reply_markup=profile(buttons))

@router.message(Form.owner_info, F.text.casefold().in_(["‚ûï–¥–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω"]))
async def add_template(message: Message, state: FSMContext):
    await state.set_state(Form.add_template_name)
    await message.answer("üè∑Ô∏è–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞", reply_markup=rmk)

@router.message(Form.owner_info, F.text)
async def add_template(message: Message, state: FSMContext, request: Request):
    data = await state.get_data()
    owner_info = await request.get_template_value(message.text, message.from_user.id)
    if owner_info == None:
        owner_info = message.text
    if len(owner_info) > 70:
        await message.answer("üö´–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    else:
        await state.update_data(owner_info=owner_info)
        if "owner_info" in data.keys() and data["owner_info"] == "CHANGE_AFTER_PUBLISH_OWNER":
            await print_event_data(state=state, message=message, after_publish=True)
            await state.set_state(Form.final)
        elif "owner_info" in data.keys() and data["owner_info"] != "":
            await print_event_data(state=state, message=message)
            await state.set_state(Form.final)
        else:
            await state.set_state(Form.photo)
            await message.answer("üì∑ –î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", reply_markup=profile(["‚ùå–ë–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", "‚¨ÖÔ∏è–Ω–∞–∑–∞–¥"]))

@router.message(Form.add_template_name, F.text)
async def add_template_name(message: Message, state: FSMContext, request: Request):
    name = message.text
    if len(name) > 15:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", reply_markup=rmk)
    else:
        await state.update_data(template_name=name)
        await state.set_state(Form.add_template_value)
        await message.answer("üìÉ–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Å–∞–º —à–∞–±–ª–æ–Ω", reply_markup=rmk)

@router.message(Form.delete_template, F.text)
async def delete_template_value(message: Message, state: FSMContext, request: Request):
    name = message.text
    delete = await request.delete_template(name, message.from_user.id)
    if not delete:
        await message.answer("–¢–∞–∫–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        await message.answer("–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
        await message.answer("üë§–î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞", reply_markup=profile(["üìÉ–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω", "‚ûï–î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω", "üóëÔ∏è—É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω", "‚¨ÖÔ∏è–Ω–∞–∑–∞–¥"]))
        await state.set_state(Form.owner_info)

@router.message(Form.add_template_value, F.text)
async def add_template_value(message: Message, state: FSMContext, request: Request):
    value = message.text
    if len(value) > 30:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω")
    else:
        await state.update_data(template_value=value)
        data = await state.get_data()
        await request.add_template(data["template_name"],  data["template_value"],  message.from_user.id)
        await state.set_state(Form.owner_info)
        if "owner_info" in data.keys() and data["owner_info"] == "CHANGE_AFTER_PUBLISH_OWNER":
            await message.answer("üë§–î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞", reply_markup=profile(["üìÉ–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω", "‚ûï–î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω", "üóëÔ∏è–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω"]))
        else:
            await message.answer("üë§–î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞", reply_markup=profile(["üìÉ–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω", "‚ûï–î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω", "üóëÔ∏è–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω", "‚¨ÖÔ∏è–Ω–∞–∑–∞–¥"]))


@router.message(Form.owner_info)
async def incorrect_form_owner(message: Message, state: FSMContext):
    await message.answer("üö´–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

@router.message(Form.photo, F.text.casefold().in_(["‚ùå–±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"]))
async def with_out_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(photo_file_id=None)
    if "photo_file_id" in data.keys() and data["photo_file_id"] == "CHANGE_AFTER_PUBLISH_PHOTO_FILE_ID":
        await print_event_data(state=state, message=message, after_publish=True)
        await state.set_state(Form.final)
    else:
        await print_event_data(state=state, message=message)
        await state.set_state(Form.final)

@router.message(Form.photo, F.photo)
async def form_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    photo_file_id = message.photo[-1].file_id
    await state.update_data(photo_file_id=photo_file_id)
    if "photo_file_id" in data.keys() and data["photo_file_id"] == "CHANGE_AFTER_PUBLISH_PHOTO_FILE_ID":
            await print_event_data(state=state, message=message, after_publish=True)
            await state.set_state(Form.final)
    else:
        await print_event_data(state=state, message=message)
        await state.set_state(Form.final)


@router.message(Form.photo, ~F.photo)
async def incorrect_form_photo(message: Message, state: FSMContext):
    
    await message.answer("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è. (*–ø–æ–¥—Å–∫–∞–∑–∫–∞* –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–∞–π–ª–æ–º)")

@router.message(Form.final, F.text.casefold().in_(["üó£Ô∏è–æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"]))
async def publish(message: Message, state: FSMContext, request: Request):
    data = await state.get_data()
    data["owner_telegram_id"] = message.from_user.id
    await request.add_event(data)
    await message.answer("üéâ–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!", reply_markup=main)
    await state.clear()

@router.message(Form.final, F.text.casefold().in_(["‚öôÔ∏è–∏–∑–º–µ–Ω–∏—Ç—å"]))
async def before_publish_final_change(message: Message, state: FSMContext):
    await state.set_state(Form.change_before_publish)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ", reply_markup=profile([
        "‚¨ÖÔ∏è–Ω–∞–∑–∞–¥", "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", "–ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ", "–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", 
        "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", "–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞", "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"
    ]))

@router.message(Form.final, F.text.casefold().in_(["‚úçÔ∏è–∏–∑–º–µ–Ω–∏—Ç—å", "‚¨ÖÔ∏è–Ω–∞–∑–∞–¥"]))
async def after_publish_final_change(message: Message, state: FSMContext):
    await state.set_state(Form.change_after_publish)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ", reply_markup=profile([
        "‚¨ÖÔ∏è–Ω–∞–∑–∞–¥", "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", "–ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ", "–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", 
        "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", "–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞", "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"
    ]))

@router.message(Form.final, F.text.casefold().in_(["‚öôÔ∏è–¥–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ"]))
async def after_change_final_change(message: Message, state: FSMContext):
    await state.set_state(Form.change_after_publish)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ", reply_markup=profile([
        "‚¨ÖÔ∏è–Ω–∞–∑–∞–¥", "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", "–ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ", "–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", 
        "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", "–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞", "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"
    ]))

@router.message(Form.final, F.text.casefold().in_(["‚úÖ–ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"]))
async def final_change_after_publish(message: Message, state: FSMContext, request: Request):
    data = await state.get_data()
    data["owner_telegram_id"] = message.from_user.id
    await request.set_event(data)
    await message.answer("üéâ–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!", reply_markup=main)
    await state.clear()


async def all_changes(message, state, after_publish=False):
    msg = message.text.lower()
    if msg == "–∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ":
        if after_publish:
            await state.update_data(name="CHANGE_AFTER_PUBLISH_NAME")
        await state.set_state(Form.name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â–µ —Ä–∞–∑",  reply_markup=rmk)
    elif msg == "–∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É":
        if after_publish:
            await state.update_data(date="CHANGE_AFTER_PUBLISH_DATE")
        await state.set_state(Form.date)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì",  reply_markup=rmk)
    elif msg == "–∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è":
        if after_publish:
            await state.update_data(time="CHANGE_AFTER_PUBLISH_TIME")
        await state.set_state(Form.time)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú",  reply_markup=rmk)
    elif msg == "–∏–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ":
        if after_publish:
            await state.update_data(place="CHANGE_AFTER_PUBLISH_PLACE")
        await state.set_state(Form.place)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ", reply_markup=rmk)
    elif msg == "–∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π":
        if after_publish:
            await state.update_data(info="CHANGE_AFTER_PUBLISH_INFO")
        await state.set_state(Form.info)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞–Ω–æ–≤–æ", reply_markup=profile(["‚ùå–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"]))
    elif msg == "–∏–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É":
        if after_publish:
            await state.update_data(link="CHANGE_AFTER_PUBLISH_LINK")
        await state.set_state(Form.link)
        await message.answer("–î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–ø–∏—Å—å", reply_markup=profile(["‚ùå–ë–µ–∑ —Å—Å—ã–ª–∫–∏"]))
    elif msg == "–∏–∑–º–µ–Ω–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞":
        if after_publish:
            await state.update_data(owner_info="CHANGE_AFTER_PUBLISH_OWNER")
        await state.set_state(Form.owner_info)
        await message.answer("–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–µ", reply_markup=profile(["üìÉ–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω", "‚ûï–î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω", "üóëÔ∏è–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω"]))
    elif msg == "–∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é":
        if after_publish:
            await state.update_data(photo_file_id="CHANGE_AFTER_PUBLISH_PHOTO_FILE_ID")
        await state.set_state(Form.photo)
        await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é", reply_markup=profile(["‚ùå–ë–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"]))


@router.message(Form.change_before_publish, F.text)
async def changes(message: Message, state: FSMContext):
    await all_changes(message=message, state=state)
    
@router.message(Form.change_before_publish)
async def incorrect_changes(message: Message, state: FSMContext):
    await message.asnwer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")


@router.message(Form.change_after_publish, F.text)
async def changes_after_publish(message: Message, state: FSMContext):
    await all_changes(message=message, state=state, after_publish=True)
    
@router.message(Form.change_after_publish)
async def incorrect_changes(message: Message, state: FSMContext):
    await message.asnwer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
