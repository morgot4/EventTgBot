from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import datetime
from utils.states import Form
from keyboards.builders import profile
from keyboards.reply import rmk

router = Router()


def check_date(date: str) -> bool: #YYYY MM DD
    try:
        date = date.split(".")[::-1]
        date[1] = date[1].zfill(2); date[2] = date[2].zfill(2)
        datetime.date.fromisoformat("-".join(date))
        date[1] = date[1].rstrip(); date[2] = date[2].rstrip()
        if datetime.datetime(int(date[0]), int(date[1]), int(date[2])) >= datetime.datetime.now():
            return True
        else:
            raise ValueError
    except Exception as ex:
        print(ex)
        return False
async def print_event_data(state, message, photo_file_id=None):
    data = await state.get_data()
    await message.answer("–í—ã —Å–æ–∑–¥–∞–ª–∏ —á–µ—Ä–Ω–æ–≤–∏–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.", reply_markup=profile(["–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", "–ò–∑–º–µ–Ω–∏—Ç—å"]))

    equals = {  "name": "<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>",
                "date": "<b>–î–∞—Ç–∞</b>",
                "info": "<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞</b>",
                "link": "<b>–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å</b>"}
    print(data.items())
    formatted_text = []
    [
        formatted_text.append(f"{equals[key]}: {value}")
        for key, value in data.items() if value != ""
    ]
    if photo_file_id != None:
        await message.answer_photo(
            photo_file_id,
            "\n".join(formatted_text)
        )
    else:
        await message.answer("\n".join(formatted_text))

@router.message(Command("profile"))
async def fill_profile(message: Message, state: FSMContext):
    await state.set_state(Form.name)
    await message.answer(
        "üëã –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", reply_markup=rmk
    )



@router.message(Form.name)
async def form_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Form.date)
    await message.answer("üìÖ –û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")



@router.message(Form.date)
async def form_date(message: Message, state: FSMContext):
    lst_date = message.text # DD MM YYYY
    if check_date(lst_date):
        await state.update_data(date=message.text)
        await state.set_state(Form.info)
        await message.answer(
            "‚ÑπÔ∏è –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞", reply_markup=profile(["–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"])
        )
        
    else:
        await message.answer("üö´ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é")


@router.message(Form.info, F.text.casefold().in_(["–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"]))
async def with_out_info(message: Message, state: FSMContext):
    await state.update_data(info="")
    await state.set_state(Form.link)
    await message.answer("üîó –î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–ø–∏—Å—å.", reply_markup=rmk)

@router.message(Form.info, F.text.casefold().in_(["–∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]))
async def with_out_info(message: Message, state: FSMContext):
    await state.update_data(info="")
    await state.set_state(Form.link)
    await message.answer("üîó –î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–ø–∏—Å—å.", reply_markup=rmk)
        
@router.message(Form.info)
async def form_info(message: Message, state: FSMContext):
    if len(message.text) < 5:
        await message.answer("üòí –í–≤–µ–¥–∏—Ç–µ —á—Ç–æ-—Ç–æ –ø–æ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ", reply_markup=profile(["–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"]))
    elif len(message.text) > 500:
        await message.answer("ü´§ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=profile(["–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"]))
    else:
        await state.update_data(info=message.text)
        await state.set_state(Form.link)
        await message.answer("üîó –î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–ø–∏—Å—å.", reply_markup=rmk)

@router.message(Form.link)
async def form_link(message: Message, state: FSMContext):

    # TODO –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Å—ã–ª–∫–∏

    await state.update_data(link=message.text)
    await state.set_state(Form.photo)
    await message.answer("üì∑ –î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", reply_markup=profile(["–ë–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"]))

@router.message(Form.photo, F.text.casefold().in_(["–±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"]))
async def with_out_photo(message: Message, state: FSMContext):
    await print_event_data(state=state, message=message)
    await state.set_state(Form.final)

@router.message(Form.photo, F.photo)
async def form_photo(message: Message, state: FSMContext):
    photo_file_id = message.photo[-1].file_id
    await print_event_data(state=state, message=message, photo_file_id=photo_file_id)
    await state.set_state(Form.final)

@router.message(Form.photo, ~F.photo)
async def incorrect_form_photo(message: Message, state: FSMContext):

    # TODO —Ç–µ–∫—É—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ç–æ –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ —Ñ–∞–π–ª–æ–º, –Ω—É–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å. 
    # TODO –ê —Ç–∞–∫ –∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏

    await message.answer("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è. (*–ø–æ–¥—Å–∫–∞–∑–∫–∞* –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–∞–π–ª–æ–º)")

@router.message(Form.final, F.text.casefold().in_(["–æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"]))
async def publish(message: Message, state: FSMContext):

    # TODO —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await message.answer("üéâ–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!", reply_markup=rmk)
    await state.clear()

@router.message(Form.final, F.text.casefold().in_(["–∏–∑–º–µ–Ω–∏—Ç—å"]))
async def final_change(message: Message, state: FSMContext):

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ", reply_markup=profile([
        "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", "–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"
    ]))
    await state.set_state(Form.change)
