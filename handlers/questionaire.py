from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from utils.states import Form
from keyboards.builders import profile
from keyboards.reply import rmk

router = Router()

@router.message(Command("profile"))
async def fill_profile(message: Message, state: FSMContext):
    await state.set_state(Form.name)
    await message.answer(
        "üëã –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", reply_markup=rmk
    )


@router.message(Form.name)
async def form_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Form.date)
    await message.answer("üìÖ –û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

@router.message(Form.date)
async def form_date(message: Message, state: FSMContext):
    lst_date = message.text.split(".")

    # TODO –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—è datetime (–≤–≤–æ–¥–∏–º–∞—è –¥–∞—Ç–∞ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π)

    if all([num.isdigit() for num in lst_date]) and 1 <= int(lst_date[0]) <= 31 and 1 <= int(lst_date[1]) <= 12 and int(lst_date[2]) >= 2024:
        await state.update_data(date=message.text)
        await state.set_state(Form.info)
        await message.answer(
            "‚ÑπÔ∏è –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
        )
        
    else:
        await message.answer("üö´ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é")

        
@router.message(Form.info)
async def form_info(message: Message, state: FSMContext):
    if len(message.text) < 5:
        await message.answer("üòí –í–≤–µ–¥–∏—Ç–µ —á—Ç–æ-—Ç–æ –ø–æ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ")
    elif len(message.text) > 500:
        await message.answer("ü´§ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    else:
        await state.update_data(info=message.text)
        await state.set_state(Form.link)
        await message.answer("üîó –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–ø–∏—Å—å.")

@router.message(Form.link)
async def form_link(message: Message, state: FSMContext):

    # TODO –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Å—ã–ª–∫–∏

    await state.update_data(info=message.text)
    await state.set_state(Form.photo)
    await message.answer("üì∑ –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥! –î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")

@router.message(Form.photo, F.photo)
async def form_photo(message: Message, state: FSMContext):
    photo_file_id = message.photo[-1].file_id
    data = await state.get_data()
    await state.clear()

    await message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")

    # TODO —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –≤—ã–≤–æ–¥ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —á—Ç–æ–±—ã key –±—ã–ª –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

    formatted_text = []
    [
        formatted_text.append(f"{key}: {value}")
        for key, value in data.items()
    ]
    await message.answer_photo(
        photo_file_id,
        "\n".join(formatted_text)
    )

@router.message(Form.photo, ~F.photo)
async def incorrect_form_photo(message: Message, state: FSMContext):

    # TODO —Ç–µ–∫—É—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ç–æ –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ —Ñ–∞–π–ª–æ–º, –Ω—É–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å. 
    # TODO –ê —Ç–∞–∫ –∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏

    await message.answer("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è")